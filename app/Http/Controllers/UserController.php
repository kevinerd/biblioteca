<?phpnamespace App\Http\Controllers;use App\Mail\UserCreated;use App\User;use App\Http\Requests\CreateUsuarioRequest;use App\Http\Requests\UpdateUserRequest;use DB;use Illuminate\Support\Facades\Auth;use Illuminate\Support\Facades\Mail;class UserController extends Controller{    public function __construct(){        $this->middleware('auth')->except('registerSite', 'verify');        $this->middleware('admin')->except('registerSite', 'verify', 'showSite', 'editSite', 'updateSite');    }    public function index(){        $usuarios = User::all();        return view('usuarios.index', compact('usuarios'));    }    public function create(){        return view('usuarios.create');    }    public function store(CreateUsuarioRequest $request){        $campos = $request->all();        $campos['password'] = bcrypt($request->password);        $campos['verified'] = User::USUARIO_NO_VERIFICADO;        $campos['verification_token'] = User::generarTokenVerificacion();        $campos['admin'] = User::USUARIO_REGULAR;        User::create($campos);        return redirect()->route('usuarios.index')->with('info', 'Usuario registrado correctamente.');    }    public function show(User $usuario){        return view('usuarios.show', compact('usuario'));    }    public function edit(User $usuario){        return view('usuarios.edit', compact('usuario'));    }    public function update(CreateUsuarioRequest $request, User $usuario){        if($request->has('name')){            $usuario->name = $request->name;        }        if($request->has('documento')){            $usuario->documento = $request->documento;        }        if($request->has('fecha_nac')){            $usuario->fecha_nac = $request->fecha_nac;        }        if($request->has('domicilio')){            $usuario->domicilio = $request->domicilio;        }        if($request->has('telefono')){            $usuario->telefono = $request->telefono;        }        if($request->has('email') && $usuario->email != $request->email){            $usuario->verified = User::USUARIO_NO_VERIFICADO;            $usuario->verification_token = User::generarTokenVerificacion();            $usuario->email = $request->email;        }        if($request->has('password')){            $usuario->password = bcrypt($request->password);        }        if($request->has('admin')){            if(!$usuario->esVerificado){                return response()                    ->json(['error' => 'Acci贸n denegada, no es un usuario verificado.',                        'code' => 409],409);            }            $usuario->admin = $request->admin;        }        if(!$usuario->isDirty()){            return response()                ->json(['error' => 'Se debe especificar al menos un valor diferente para actualizar',                    'code' => 422], 422);        }        $usuario->save();        return redirect()->route('usuarios.index')->with('info', 'Usuario modificado correctamente.');    }    public function destroy(User $usuario){        $usuario->delete();        return redirect()->route('usuarios.index');    }    public function verify($token){        $user = User::where('verification_token', $token)->firstOrFail();        $user->verified = User::USUARIO_VERIFICADO;        $user->verification_token = null;        $user->save();        if ($user->admin === 'false'){            return redirect()->route('site.login')->with('info', 'Cuenta verificada correctamente.');        }        return redirect()->route('usuarios.index')->with('info', 'Usuario verificado correctamente.');    }    public function resend(User $usuario){        if ($usuario->esVerificado()){            return $this->errorResponse('Este usuario ya ha sido modificado.', 409);        }        retry(5, function() use ($usuario){            Mail::to($usuario->email)->send(new UserCreated($usuario));        }, 100);        return redirect()->route('usuarios.index')->with('info', 'Correo de verificaci贸n reenviado');    }    public function registerSite(CreateUsuarioRequest $request){        $campos = $request->all();        $campos['password'] = bcrypt($request->password);        $campos['verified'] = User::USUARIO_NO_VERIFICADO;        $campos['verification_token'] = User::generarTokenVerificacion();        $campos['admin'] = User::USUARIO_REGULAR;        User::create($campos);        return redirect()->route('site.login')->with('info', 'Usuario registrado correctamente. Por favor verifique su cuenta con el enlace enviado a su correo electr贸nico.');    }    public function showSite(User $usuario){        if($usuario->id == Auth::user()->id){            $prestamos = DB::table('prestamos')                ->join('users', 'prestamos.id_user', '=', 'users.id')                ->join('libros', 'prestamos.id_libro', '=', 'libros.id')                ->where('prestamos.id_user', '=', $usuario->id)                ->get(['prestamos.*','libros.titulo']);            return view('site.usuarios.usuario', compact('usuario', 'prestamos'));        }        return redirect()->route('site.login');    }    public function editSite(User $usuario){        return view('site.usuarios.edit', compact('usuario'));    }    public function updateSite(UpdateUserRequest $request, User $usuario){        if($request->has('name')){            $usuario->name = $request->name;        }        if($request->has('documento')){            $usuario->documento = $request->documento;        }        if($request->has('fecha_nac')){            $usuario->fecha_nac = $request->fecha_nac;        }        if($request->has('domicilio')){            $usuario->domicilio = $request->domicilio;        }        if($request->has('telefono')){            $usuario->telefono = $request->telefono;        }        if($request->has('email') && $usuario->email != $request->email){            $usuario->verified = User::USUARIO_NO_VERIFICADO;            $usuario->verification_token = User::generarTokenVerificacion();            $usuario->email = $request->email;        }        if($request->has('password')){            $usuario->password = bcrypt($request->password);        }        if($request->has('admin')){            if(!$usuario->esVerificado){                return response()                    ->json(['error' => 'Acci贸n denegada, no es un usuario verificado.',                        'code' => 409],409);            }            $usuario->admin = $request->admin;        }        if(!$usuario->isDirty()){            return response()                ->json(['error' => 'Se debe especificar al menos un valor diferente para actualizar',                    'code' => 422], 422);        }        $usuario->update();        return redirect()->route('site.usuario', $usuario)->with('info', 'Usuario modificado correctamente.');    }}