<?phpnamespace App\Http\Controllers;use App\User;use App\Http\Requests\CreateUsuarioRequest;use DB;class UserController extends Controller{    public function __construct(){    }    public function index(){        $usuarios = User::all();        return response()->json(['data' => $usuarios], 200);    }    /*public function create(){        $categorias = DB::table('categorias')->where('id_grupo', '3')->get();        return view('usuarios.create', compact('categorias'));    }*/    public function store(CreateUsuarioRequest $request){        $campos = $request->all();        $campos['password'] = bcrypt($request->password);        $campos['verified'] = User::USUARIO_NO_VERIFICADO;        $campos['verification_token'] = User::generarTokenVerificacion();        $campos['admin'] = User::USUARIO_REGULAR;        $usuario = User::create($campos);        return response()->json(['data' => $usuario], 201);    }    public function show($id){        $usuario = User::findOrFail($id);        return response()->json(['data' => $usuario], 200);    }    /*public function edit($id){        $usuario = Usuario::findOrFail($id);        $categorias = Categoria::pluck('nombre', 'id');        return view('usuarios.edit', compact('usuario', 'categorias'));    }*/    public function update(CreateUsuarioRequest $request, $id){        $user = User::findOrFail($id);        if($request->has('name')){            $user->name = $request->name;        }        if($request->has('email') && $user->email != $request->email){            $user->verified = User::USUARIO_NO_VERIFICADO;            $user->verification_token = User::generarTokenVerificacion();            $user->email = $request->email;        }        if($request->has('password')){            $user->password = bcrypt($request->password);        }        if($request->has('admin')){            if(!$user->esVerificado){                return response()                    ->json(['error' => 'AcciÃ³n denegada, no es un usuario verificado.',                        'code' => 409],409);            }            $user->admin = $request->admin;        }        if(!$user->isDirty()){            return response()                ->json(['error' => 'Se debe especificar al menos un valor diferente para actualizar',                    'code' => 422], 422);        }        $user->save();        return response()->json(['data' => $user], 200);        return redirect()->route('usuarios.index')->with('info', 'Usuario modificado correctamente.');    }    public function destroy($id){        User::findOrFail($id)->delete();        return redirect()->route('usuarios.index');    }    public function verify($token){        $user = User::where('verification_token', $token)->firstOrFail();        $user->verified = User::USUARIO_VERIFICADO;        $user->verification_token = null;        $user->save();        return redirect()->route('usuarios.index')->with('info', 'Usuario verificado correctamente.');    }}