<?phpnamespace App\Http\Controllers;use App\Mail\UserCreated;use App\User;use App\Http\Requests\CreateUsuarioRequest;use DB;use Illuminate\Support\Facades\Mail;class UserController extends Controller{    public function __construct(){    }    public function index(){        $usuarios = User::all();        return view('usuarios.index', compact('usuarios'));    }    public function create(){        return view('usuarios.create');    }    public function store(CreateUsuarioRequest $request){        $campos = $request->all();        $campos['password'] = bcrypt($request->password);        $campos['verified'] = User::USUARIO_NO_VERIFICADO;        $campos['verification_token'] = User::generarTokenVerificacion();        $campos['admin'] = User::USUARIO_REGULAR;        $usuario = User::create($campos);        return response()->json(['data' => $usuario], 201);    }    public function show(User $usuario){        return response()->json(['data' => $usuario], 200);    }    public function edit(User $usuario){        return view('usuarios.edit', compact('usuario'));    }    public function update(CreateUsuarioRequest $request, User $usuario){        if($request->has('name')){            $usuario->name = $request->name;        }        if($request->has('email') && $usuario->email != $request->email){            $usuario->verified = User::USUARIO_NO_VERIFICADO;            $usuario->verification_token = User::generarTokenVerificacion();            $usuario->email = $request->email;        }        if($request->has('password')){            $usuario->password = bcrypt($request->password);        }        if($request->has('admin')){            if(!$usuario->esVerificado){                return response()                    ->json(['error' => 'Acción denegada, no es un usuario verificado.',                        'code' => 409],409);            }            $usuario->admin = $request->admin;        }        if(!$usuario->isDirty()){            return response()                ->json(['error' => 'Se debe especificar al menos un valor diferente para actualizar',                    'code' => 422], 422);        }        $usuario->save();        return redirect()->route('usuarios.index')->with('info', 'Usuario modificado correctamente.');    }    public function destroy(User $usuario){        $usuario->delete();        return redirect()->route('usuarios.index');    }    public function verify($token){        $user = User::where('verification_token', $token)->firstOrFail();        $user->verified = User::USUARIO_VERIFICADO;        $user->verification_token = null;        $user->save();        return redirect()->route('usuarios.index')->with('info', 'Usuario verificado correctamente.');    }    public function resend(User $usuario){        if ($usuario->esVerificado()){            return $this->errorResponse('Este usuario ya ha sido modificado.', 409);        }        retry(5, function() use ($usuario){            Mail::to($usuario->email)->send(new UserCreated($usuario));        }, 100);        return redirect()->route('usuarios.index')->with('info', 'Correo de verificación reenviado');    }}